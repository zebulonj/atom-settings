# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.jsx':
  'Component':
    'prefix': 'component'
    'body': """
${1:import React, { Component \\} from 'react';
import PropTypes from 'prop-types';

}export class ${2:[ComponentName]} extends Component {
  static propTypes = {};
  static defaultProps = {};

  render() {
    return (
      <div></div>
    );
  }
}
"""

  'Functional Component':
    'prefix': 'fcomponent'
    'body': """
${1:import React from 'react';

}export const ${2:[ComponentName]} = ( props ) => (
  <div></div>
);
"""

  'Higher Order Component':
    'prefix': 'hocomponent'
    'body': """
export const ${1:[HOC Name]} = WrappedComponent => {
  class Wrapper extends Component {
    static propTypes = {};
    static defaultProps = {};

    render() {
      return (
        <WrappedComponent { ...this.props } />
      );
    }
  }

  Wrapper.displayName = `$1(${ getDisplayName( WrappedComponent ) })`;

  return Wrapper;
}
"""

  'Private Component':
    'prefix': 'pcomponent'
    'body': """
export const ${1:Component} = ( props ) => (
  <div></div>
);

$1.propTypes = {};

$1.defaultProps = {};
"""

  'Component Test Boilerplate':
    'prefix': 'react.test'
    'body': """
import test from 'tape';
import { shallow } from 'enzyme';

import React from 'react';

import ComponentFactory from './';

test( "react/...", sub => {
  sub.test( "...should render.", assert => {
    assert.plan( 2 );

    const Component = ComponentFactory({ React });

    const wrapper = shallow( <Component /> );

    assert.ok( wrapper );
    assert.fail( "Not implemented." );

    assert.end();
  });
});
"""

  'Formik Form':
    'prefix': 'formik'
    'body': """
<Form
  initialValues={{}}
  onSubmit={ values => {
    console.log( 'Submit:', values );
  }}
  render={ ({ handleSubmit }) => (
    <form onSubmit={ handleSubmit }>
      $1
    </form>
  )}
  />
"""

  'Component Test Boilerplate (With Context)':
    'prefix': 'react.test.context'
    'body': """
import test from 'tape';
import { mount } from 'enzyme';

import Immutable from 'immutable';
import React from 'react';

import ComponentFactory from './';

test( "react/...", sub => {
  sub.test( "...should render.", assert => {
    assert.plan( 2 );

    const Component = ComponentFactory({ React });

    const TestWrapper = React.createClass({
      propTypes: {
        children: React.PropTypes.any
      },

      contextTypes: {
        dispatch: React.PropTypes.func.isRequired,
        state:    React.PropTypes.object.isRequired
      },

      render() {
        return (
          <Component />
        );
      }
    });

    const context = {
      state: Immutable.fromJS({}),
      dispatch() {}
    };

    const wrapper = mount( <TestWrapper />, { context });

    assert.ok( wrapper );
    assert.fail( "Not implemented." );

    assert.end();
  });
});
"""

'.source.js':
  'Factory':
    'prefix': 'factory'
    'body': """
const defaultOptions = {};

export default function( options = {} ) {
  options = Object.assign({}, defaultOptions, options );

  return {};
}
"""

  'Test':
    'prefix': 'test'
    'body': """
test( "${1:[Test]}", assert => {
  assert.fail( "Test not implemented." );
  assert.end();
});
"""

  'Test Suite':
    'prefix': 'suite'
    'body': """
test( "${1:[Suite]}...", sub => {
  sub.test( "", assert => {
    assert.fail( "Test not implemented." );
    assert.end();
  });
});
"""

  'Reducer':
    'prefix': 'reducer'
    'body': """
export const STATE_KEY = '$reducer';

export default function $reducer( state = {}, action ) {
  switch ( action.type ) {
    default:
      return state;
  }
}

"""

  'GraphQLObjectType':
    'prefix': 'gql.ot'
    'body': """
const ${1:[ObjectType]} = new graphql.GraphQLObjectType({
  name: '$1',
  fields: {
    ${2:[FIELD NAME]}: {
      type: ${3:[FIELD TYPE]},
      ${4:args: {
        id: { type: graphql.GraphQLID \\}
      \\},}
      ${5:resolve: function ( obj, args, context ) {
        return $6;
      \\}}
    }
  }
});
"""
